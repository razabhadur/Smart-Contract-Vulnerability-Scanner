import re

def detect_reentrancy(code):
    vulnerabilities = []
    if 'call.value(' in code and 'msg.sender.transfer(' in code:
        vulnerabilities.append('Potential reentrancy attack detected.')
    return vulnerabilities

def detect_unchecked_send(code):
    vulnerabilities = []
    if '.send(' in code and 'if (' not in code:
        vulnerabilities.append('Potential unchecked send vulnerability detected.')
    return vulnerabilities

def detect_timestamp_dependency(code):
    vulnerabilities = []
    if 'block.timestamp' in code:
        vulnerabilities.append('Potential timestamp dependency detected.')
    return vulnerabilities

def detect_gas_limit_dependency(code):
    vulnerabilities = []
    patterns = ['for', 'while']
    for pattern in patterns:
        if pattern in code:
            vulnerabilities.append(f'Potential gas limit dependency detected due to {pattern} loop.')
    return vulnerabilities

def scan_contract(code):
    vulnerabilities = []
    vulnerabilities.extend(detect_reentrancy(code))
    vulnerabilities.extend(detect_unchecked_send(code))
    vulnerabilities.extend(detect_timestamp_dependency(code))
    vulnerabilities.extend(detect_gas_limit_dependency(code))
    return vulnerabilities

if __name__ == '__main__':
    contract_code = input('Enter the Solidity contract code: ')
    detected_vulnerabilities = scan_contract(contract_code)
    print('\nDetected Vulnerabilities:')
    for vulnerability in detected_vulnerabilities:
        print(vulnerability)
